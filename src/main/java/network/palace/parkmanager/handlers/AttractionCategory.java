package network.palace.parkmanager.handlers;

/**
 * Represents categories for attractions, commonly used to classify theme park rides
 * and experiences. Each category provides characteristics to better identify the type
 * of attraction based on its features or audience targets.
 *
 * <p>Categories include a broad range of attributes such as thrill level, ride speed,
 * and special features like interaction or live performances.</p>
 *
 * <p>This enum offers utilities to process category names effectively:</p>
 * <ul>
 *   <li><b>getShortName</b>: Returns the name of the category in a simplified,
 *   lower-case, and underscore-free format.</li>
 *   <li><b>getFormattedName</b>: Provides a human-readable version of the category,
 *   with proper capitalization and spaces between words.</li>
 *   <li><b>fromString</b>: Converts a given string, interpreted as a simplified
 *   category name, into a corresponding <code>AttractionCategory</code> value.</li>
 * </ul>
 *
 * <p>The available categories include, but are not limited to:</p>
 * <ul>
 *   <li><b>BIG_DROPS</b> - Attractions featuring large vertical drops.</li>
 *   <li><b>SMALL_DROPS</b> - Attractions featuring smaller, less intense drops.</li>
 *   <li><b>SLOW_RIDE</b> - Calm rides focused on a relaxed, slow-paced experience.</li>
 *   <li><b>THRILL_RIDE</b> - High-intensity attractions focused on excitement and adrenaline.</li>
 *   <li><b>WATER_RIDE</b> - Water-based experiences or attractions involving water interaction.</li>
 *   <li><b>SPINNING</b> - Rides characterized by rapid spinning or circular motion.</li>
 *   <li><b>DARK</b> - Attractions that take place primarily in darker environments.</li>
 *   <li><b>LOUD</b> - Loud experiences often involving high volumes of sound or music.</li>
 *   <li><b>SCARY</b> - Attractions designed with elements of fear or suspense.</li>
 *   <li><b>CLASSIC</b> - Time-honored rides renowned for their historic or iconic value.</li>
 *   <li><b>ANIMAL_ENCOUNTERS</b> - Experiences involving interaction with animals.</li>
 *   <li><b>INDOOR</b> - Attractions located entirely within indoor environments.</li>
 *   <li><b>INTERACTIVE</b> - Experiences offering user participation or interactivity.</li>
 *   <li><b>STAGE_SHOW</b> - Live performance-based attractions focused on entertainment.</li>
 *   <li><b>AUDIO_SERVER</b> - Experiences with synchronized audio-based delivery methods.</li>
 *   <li><b>PHOTOPASS</b> - Experiences associated with photography or photo services.</li>
 * </ul>
 */
public enum AttractionCategory {
    BIG_DROPS, SMALL_DROPS, SLOW_RIDE, THRILL_RIDE, WATER_RIDE, SPINNING, DARK, LOUD,
    SCARY, CLASSIC, ANIMAL_ENCOUNTERS, INDOOR, INTERACTIVE, STAGE_SHOW, AUDIO_SERVER, PHOTOPASS;

    /**
     * Converts the name of the current enum constant to a short name representation.
     * <p>
     * The short name is generated by:
     * <ul>
     *   <li>Converting the name to lowercase.</li>
     *   <li>Replacing all underscores ("_") with an empty string.</li>
     * </ul>
     * </p>
     *
     * @return A {@code String} representing the short name of the enum constant.
     */
    public String getShortName() {
        return name().toLowerCase().replaceAll("_", "");
    }

    /**
     * Converts the current enum name (represented in all uppercase with underscores)
     * into a human-readable, formatted name. The formatting includes:
     * <ul>
     *   <li>Converting all characters to lowercase.</li>
     *   <li>Splitting the name into words using underscores as delimiters.</li>
     *   <li>Capitalizing the first letter of each word while keeping the remaining letters in lowercase.</li>
     *   <li>Joining the words with a space as a separator.</li>
     * </ul>
     *
     * @return A formatted string representation of the enum name, suitable for display purposes.
     */
    public String getFormattedName() {
        String[] words = name().toLowerCase().split("_");
        StringBuilder formatted = new StringBuilder();
        for (int i = 0; i < words.length; i++) {
            formatted.append(Character.toUpperCase(words[i].charAt(0))).append(words[i].substring(1));
            if (i < (words.length - 1)) {
                formatted.append(" ");
            }
        }
        return formatted.toString();
    }

    /**
     * Converts a given string representation of an attraction category to its corresponding
     * {@code AttractionCategory} enum constant. The string comparison is case-insensitive and
     * uses the short name of each category for matching.
     *
     * <p>If the provided string does not match any category's short name, this method returns null.</p>
     *
     * @param s the string representation of the attraction category to be converted.
     *          This value should match the short name of an {@code AttractionCategory}.
     * @return the corresponding {@code AttractionCategory} if a match is found;
     *         otherwise, {@code null}.
     */
    public static AttractionCategory fromString(String s) {
        for (AttractionCategory category : values()) {
            if (category.getShortName().equalsIgnoreCase(s)) {
                return category;
            }
        }
        return null;
    }
}
