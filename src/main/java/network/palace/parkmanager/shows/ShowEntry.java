package network.palace.parkmanager.shows;

import lombok.Getter;
import network.palace.core.utils.ItemUtil;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.Arrays;
import java.util.Random;

/**
 * Represents an entry for a show with details about its region, display name, associated command,
 * and a randomly generated data value used for item stack creation.
 * <p>
 * This class provides functionality to retrieve a visual representation of the show entry in the
 * form of an {@code ItemStack}.
 * </p>
 *
 * <p><b>Fields:</b></p>
 * <ul>
 *   <li>{@code region} - The region associated with the show entry.</li>
 *   <li>{@code displayName} - The display name of the show entry.</li>
 *   <li>{@code command} - The command associated with the show entry.</li>
 *   <li>{@code data} - A randomly generated byte value, used for display and associated with the item stack.</li>
 * </ul>
 *
 * <p><b>Constructor:</b></p>
 * <ul>
 *   <li>Initializes the {@code region}, {@code displayName}, and {@code command} properties.</li>
 *   <li>Assigns a random byte value to the {@code data} field for unique item stack representation.</li>
 * </ul>
 *
 * <p><b>Method Details:</b></p>
 * <ul>
 *   <li>
 *     {@code getItem} - Generates an {@code ItemStack} representation for the show entry.
 *     <ul>
 *       <li>The item stack uses concrete material and the {@code data} value to assign a specific color.</li>
 *       <li>Includes the display name and a description indicating the ability to request the show.</li>
 *     </ul>
 *   </li>
 * </ul>
 */
@Getter
public class ShowEntry {
    /**
     * The region associated with the show entry.
     * <p>
     * This field represents the geographic or thematic location where the show entry applies.
     * It is utilized to categorize or group show entries by their respective regions.
     * </p>
     * <p><b>Purpose:</b></p>
     * <ul>
     *   <li>Defines the scope or applicability of the show entry.</li>
     *   <li>Used in conjunction with other fields, such as {@code displayName} and {@code command}, to provide
     *       a comprehensive representation of the show entry.</li>
     * </ul>
     */
    private String region;

    /**
     * Represents the display name associated with a show entry.
     * <p>
     * This field stores the human-readable name of the show, which is used to identify the show
     * in a user interface or item stack representation. It serves as the primary label for
     * distinguishing this show entry.
     * </p>
     * <p><b>Uses:</b></p>
     * <ul>
     *   <li>Displayed to users to represent the show entry.</li>
     *   <li>Utilized in {@code ItemStack} creation for showing details in associated tools or commands.</li>
     * </ul>
     * <p>This value is initialized during object creation and can be retrieved through the {@code getDisplayName()} method.</p>
     */
    private String displayName;

    /**
     * The command associated with the show entry.
     * <p>
     * This command serves as the executable instruction tied to the show, allowing
     * for interaction or execution of specific functionality related to the show entry.
     * </p>
     */
    private String command;

    /**
     * A randomly generated byte value used to uniquely represent an {@code ItemStack}
     * associated with this show entry.
     *
     * <p>This value is utilized to differentiate visual representations of the item
     * stack, such as assigning different colors or styles based on the byte value.</p>
     *
     * <p><b>Usage Details:</b></p>
     * <ul>
     *   <li>Generated during the instantiation of the {@code ShowEntry} object.</li>
     *   <li>Used in the {@code getItem} method to set specific properties of the
     *       generated {@code ItemStack}.</li>
     * </ul>
     */
    private byte data;

    /**
     * Constructs a new {@code ShowEntry} object to represent a show command with a specified region and display name.
     *
     * <p>This constructor initializes the {@code ShowEntry} with the specified parameters and assigns a random data value.</p>
     *
     * @param command The command associated with the show entry. This denotes the specific show or action to be executed.
     * @param region The region associated with the show entry. This is used to identify the targeted geographical or virtual area.
     * @param displayName The display name for the show entry. This is a user-friendly name or identifier for the show.
     */
    public ShowEntry(String command, String region, String displayName) {
        this.region = region;
        this.displayName = displayName;
        this.command = command;
        data = (byte) new Random().nextInt(16);
    }

    /**
     * Creates and returns an {@link ItemStack} representing the show entry item.
     * <p>
     * The item is created using the type {@link Material#CONCRETE}, a quantity of 1,
     * and additional attributes such as:
     * <ul>
     *     <li>Data value representing specific properties of the item.</li>
     *     <li>A display name defining the item's main description.</li>
     *     <li>Lore consisting of a placeholder and a description for show requests.</li>
     * </ul>
     *
     * @return An {@link ItemStack} configured with the show entry details, including display
     *         name, lore, and material as concrete.
     */
    public ItemStack getItem() {
        return ItemUtil.create(Material.CONCRETE, 1, data, displayName, Arrays.asList("", ChatColor.YELLOW + "Request to start this show"));
    }
}
